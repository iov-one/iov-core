import {
  Address,
  Algorithm,
  ChainId,
  Identity,
  isSendTransaction,
  Nonce,
  PostableBytes,
  PubkeyBytes,
  SendTransaction,
  SignatureBytes,
  SignedTransaction,
  TokenTicker,
} from "@iov/bcp";
import { Encoding, fromHex } from "@iov/encoding";

import { liskCodec } from "./liskcodec";

// use nethash as chain ID
const liskTestnet = "lisk-da3ed6a454" as ChainId;
const liskEpochAsUnixTimestamp = 1464109200;
const defaultCreationTimestamp = 865708731 + liskEpochAsUnixTimestamp;
const defaultPublicKey = {
  algo: Algorithm.Ed25519,
  data: fromHex("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff") as PubkeyBytes,
};
const defaultSender = "10645226540143571783L" as Address;
const defaultRecipient = "10010344879730196491L" as Address;
const defaultAmount = {
  quantity: "123456789",
  fractionalDigits: 8,
  tokenTicker: "LSK" as TokenTicker,
};

describe("liskCodec", () => {
  it("derives addresses properly", () => {
    // https://testnet-explorer.lisk.io/address/6076671634347365051L
    const identity: Identity = {
      chainId: liskTestnet,
      pubkey: {
        algo: Algorithm.Ed25519,
        data: fromHex("f4852b270f76dc8b49bfa88de5906e81d3b001d23852f0e74ba60cac7180a184") as PubkeyBytes,
      },
    };
    expect(liskCodec.identityToAddress(identity)).toEqual("6076671634347365051L");
  });

  it("can create bytes to sign", () => {
    const tx: SendTransaction = {
      kind: "bcp/send",
      chainId: liskTestnet,
      senderPubkey: defaultPublicKey,
      amount: defaultAmount,
      sender: defaultSender,
      recipient: defaultRecipient,
    };
    const bytes = liskCodec.bytesToSign(tx, defaultCreationTimestamp as Nonce);
    expect(bytes).toBeTruthy();
  });

  it("requires 8 fractional digits in bytes to sign", () => {
    const tx: SendTransaction = {
      kind: "bcp/send",
      chainId: liskTestnet,
      senderPubkey: defaultPublicKey,
      amount: {
        ...defaultAmount,
        fractionalDigits: 7,
      },
      sender: defaultSender,
      recipient: defaultRecipient,
    };
    expect(() => liskCodec.bytesToSign(tx, defaultCreationTimestamp as Nonce)).toThrowError(/Requires 8/);
  });

  it("can create bytes to post", () => {
    const tx: SendTransaction = {
      kind: "bcp/send",
      chainId: liskTestnet,
      senderPubkey: defaultPublicKey,
      amount: defaultAmount,
      sender: defaultSender,
      recipient: defaultRecipient,
    };

    const signed: SignedTransaction = {
      transaction: tx,
      signatures: [
        {
          nonce: defaultCreationTimestamp as Nonce,
          pubkey: defaultPublicKey,
          signature: fromHex("26272829") as SignatureBytes,
        },
      ],
    };

    const bytes = liskCodec.bytesToPost(signed);
    expect(bytes).toBeTruthy();

    expect(JSON.parse(Encoding.fromUtf8(bytes))).toEqual({
      type: 0,
      timestamp: 865708731,
      amount: "123456789",
      fee: "10000000",
      recipientId: "10010344879730196491L",
      senderPublicKey: "00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",
      signature: "26272829",
      id: "15806479375328957764",
      asset: {},
    });
  });

  it("can parse transaction", () => {
    // curl -s 'https://testnet.lisk.io/api/transactions?id=9181508057602672832' | jq '.data[0]'
    const serialized = Encoding.toUtf8(`
      {
        "id": "9181508057602672832",
        "height": 6309471,
        "blockId": "1008284795900419624",
        "type": 0,
        "timestamp": 73863961,
        "senderPublicKey": "06ad4341a609af2de837e1156f81849b05bf3c280940a9f45db76d09a3a3f2fa",
        "senderId": "10176009299933723198L",
        "recipientId": "6076671634347365051L",
        "recipientPublicKey": "f4852b270f76dc8b49bfa88de5906e81d3b001d23852f0e74ba60cac7180a184",
        "amount": "244550000",
        "fee": "10000000",
        "signature": "9a6c75056151d76791b69d268102241aa0f5930d098a1af48bab9b6e7706afcf24156ae2a7178cf1c3b7865094653dcaf99cdd7cb7aa9a8a3e5c4121f2a44a00",
        "signatures": [],
        "confirmations": 101,
        "asset": {
          "data": "Yet another Lisk transaction generated by IOV-Core"
        }
      }
    `) as PostableBytes;

    const parsed = liskCodec.parseBytes(serialized, liskTestnet);
    const unsigned = parsed.transaction;
    if (!isSendTransaction(unsigned)) {
      throw new Error("wrong transaction kind");
    }
    if (!unsigned.senderPubkey) {
      throw new Error("No senderPubkey");
    }
    expect(unsigned.fee).toBeTruthy();
    expect(unsigned.fee!.tokens).toBeTruthy();
    expect(unsigned.fee!.tokens!.quantity).toEqual("10000000");
    expect(unsigned.fee!.tokens!.fractionalDigits).toEqual(8);
    expect(unsigned.fee!.tokens!.tokenTicker).toEqual("LSK");
    expect(unsigned.amount).toBeTruthy();
    expect(unsigned.amount.quantity).toEqual("244550000");
    expect(unsigned.amount.fractionalDigits).toEqual(8);
    expect(unsigned.amount.tokenTicker).toEqual("LSK");
    expect(unsigned.memo).toEqual("Yet another Lisk transaction generated by IOV-Core");
    expect(unsigned.chainId).toEqual(liskTestnet);
    expect(unsigned.senderPubkey.algo).toEqual(Algorithm.Ed25519);
    expect(unsigned.senderPubkey.data).toEqual(
      fromHex("06ad4341a609af2de837e1156f81849b05bf3c280940a9f45db76d09a3a3f2fa"),
    );
    expect(unsigned.recipient).toEqual("6076671634347365051L");

    expect(parsed.signatures.length).toEqual(1);
    expect(parsed.signatures[0].nonce).toEqual((73863961 + liskEpochAsUnixTimestamp) as Nonce);
    expect(parsed.signatures[0].pubkey.algo).toEqual(Algorithm.Ed25519);
    expect(parsed.signatures[0].pubkey.data).toEqual(
      fromHex("06ad4341a609af2de837e1156f81849b05bf3c280940a9f45db76d09a3a3f2fa"),
    );
    expect(parsed.signatures[0].signature).toEqual(
      fromHex(
        "9a6c75056151d76791b69d268102241aa0f5930d098a1af48bab9b6e7706afcf24156ae2a7178cf1c3b7865094653dcaf99cdd7cb7aa9a8a3e5c4121f2a44a00",
      ),
    );
  });
});
